https://leetcode.com/problems/frequency-of-the-most-frequent-element/description/


// class Solution {
// public:
//     int maxFrequency(vector<int>& nums, int k) {
//         int n = k;
//         int i = 1;
//         int a = 0;
//         sort(nums.begin(), nums.end());
//         while(n>0 && i<nums.size())
//         {
//             if(nums[i]-nums[i-1]<n)
//             {
//                 n -= nums[i]-nums[i-1];
//                 nums[i-1] = nums[i];
//                 a = nums[i];
//                 break;
//             }
//             i++;
//         }
//         i++;
//         while(n>0 && i<nums.size())
//         {
//             if(nums[i-1]==a && nums[i]-nums[i-1]<n)
//             {
//                 n -= nums[i]-nums[i-1];
//                 nums[i] = a;
//             }
//             i++;
//         }
//         int count = 0;
//         cout<<a<<endl;
//         for(int i = 0; i<nums.size(); i++)
//         {
//             cout<<nums[i]<<" ";
//             if(nums[i]==a) count++;
//         }   
//         if(n==k) count++;
//         return count;
//     }
// };

class Solution {
public:
    int maxFrequency(vector<int>& A, int k) {
        sort(begin(A), end(A));
        long i = 0, N = A.size(), ans = 1, sum = 0;
        for (int j = 0; j < N; ++j) {
            sum += A[j];
            while ((j - i + 1) * A[j] - sum > k) sum -= A[i++];
            ans = max(ans, j - i + 1);
        }
        return ans;
    }
};
