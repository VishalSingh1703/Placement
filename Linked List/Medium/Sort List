https://leetcode.com/problems/sort-list/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;

        ListNode* temp = NULL;
        ListNode* slow = head;
        ListNode* fast = head;

        while(fast && fast->next)
        {
            temp = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        temp->next = NULL;
        ListNode* l1 = sortList(head);
        ListNode* l2 = sortList(slow);

        return mergeList(l1, l2);
    }

    ListNode* mergeList(ListNode* list1, ListNode* list2)
    {
        if(!list1) return list2;
        if(!list2) return list1;
        ListNode* head1 = list1, *head2 = list2;
        ListNode* start = nullptr, *temp = nullptr;
        if(head1->val>head2->val) swap(head1, head2);
        start = head1;
        while(head1 && head2)
        {
            temp = nullptr;
            while(head1 && head1->val<=head2->val)
            {
                temp = head1;
                head1 = head1->next;
            }
            temp->next = head2;
            swap(head1, head2);
        }
        return start;
    }
};
